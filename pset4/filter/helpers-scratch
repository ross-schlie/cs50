blueAvg = round((float) blue / (float) boxesToAvg);
            if (blueAvg > 255)
            {
                printf("DEBUG BLUE AVG VALUE = %f from total %li over %i \n", blueAvg, blue, boxesToAvg);
                blueAvg = 255;
            }

            redAvg = round((float) green / (float) boxesToAvg);
            if (redAvg > 255)
            {
                printf("DEBUG BLUE AVG VALUE = %f from total %li over %i \n", redAvg, red, boxesToAvg);
                redAvg = 255;
            }

            greenAvg = round((float) red / (float) boxesToAvg);
            if (greenAvg > 255)
            {
                printf("DEBUG BLUE AVG VALUE = %f from total %li over %i \n", greenAvg, green, boxesToAvg);
                greenAvg = 255;
            }


// //if everything is white...
            // if (blue > 0)
            // {
            //     blurredImg[y][x].rgbtBlue = round(blue / boxesToAvg);
            // }
            // else
            // {
            //     blurredImg[y][x].rgbtBlue = image[y][x].rgbtBlue;
            // }

            // if (green > 0)
            // {
            //     blurredImg[y][x].rgbtGreen = round(green / boxesToAvg);
            // }
            // else
            // {
            //     blurredImg[y][x].rgbtGreen = image[y][x].rgbtGreen;
            // }

            // if (red > 0)
            // {
            //     blurredImg[y][x].rgbtRed = round(red / boxesToAvg);
            // }
            // else
            // {
            //     blurredImg[y][x].rgbtRed = image[y][x].rgbtRed;
            // }




            // Blur image
void blur(int height, int width, RGBTRIPLE image[height][width])
{
    RGBTRIPLE blurredImg[height][width];
    // BLURBOX box;

    // bool edgeX;
    // bool edgeY;
    // bool edgeMaxX;
    // bool edgeMaxY;

    // int boxesToAvg;
    // long blue;
    // long red;
    // long green;

    // float blueAvg = 0;
    // float redAvg = 0;
    // float greenAvg = 0;

    for (int y = 0; y < height; y++)
    {
        for (int x = 0; x < width; x++)
        {
            BLURBOX box;

            bool edgeX = false;
            bool edgeY = false;
            bool edgeMaxX = false;
            bool edgeMaxY = false;

            int boxesToAvg = 1;
            long blue = 0;
            long red = 0;
            long green = 0;

            float blueAvg = 0;
            float redAvg = 0;
            float greenAvg = 0;

            //if on the edges, skip
            if (y == 0)
            {
                edgeY = true;
            }

            if (x == 0)
            {
                edgeX = true;
            }

            if (height == y)
            {
                edgeMaxY = true;
            }

            if (width == x)
            {
                edgeMaxX = true;
            }

            // populate if not edged
            if (!edgeX && !edgeY)
            {
                box.topLeft = image[y - 1][x - 1];
                blue += box.topLeft.rgbtBlue;
                green += box.topLeft.rgbtGreen;
                red += box.topLeft.rgbtRed;
                boxesToAvg++;
            }

            if (!edgeY)
            {
                box.top = image[y - 1][x];
                blue += box.top.rgbtBlue;
                green += box.top.rgbtGreen;
                red += box.top.rgbtRed;
                boxesToAvg++;
            }

            if (!edgeY && !edgeMaxX)
            {
                box.topRight = image[y + 1][x + 1];
                blue += box.topRight.rgbtBlue;
                green += box.topRight.rgbtGreen;
                red += box.topRight.rgbtRed;
                boxesToAvg++;
            }

            if (!edgeX)
            {
                box.left = image[y][x - 1];
                blue += box.left.rgbtBlue;
                green += box.left.rgbtGreen;
                red += box.left.rgbtRed;
                boxesToAvg++;
            }

            box.self = image[y][x];
            blue += box.self.rgbtBlue;
            green += box.self.rgbtGreen;
            red += box.self.rgbtRed;

            if (!edgeMaxX)
            {
                box.right = image[y][x + 1];
                blue += box.right.rgbtBlue;
                green += box.right.rgbtGreen;
                red += box.right.rgbtRed;
                boxesToAvg++;
            }

            if (!edgeX && !edgeMaxY)
            {
                box.bottomLeft = image[y + 1][x - 1];
                blue += box.bottomLeft.rgbtBlue;
                green += box.bottomLeft.rgbtGreen;
                red += box.bottomLeft.rgbtRed;
                boxesToAvg++;
            }

            if (!edgeMaxY)
            {
                box.bottom = image[y + 1][x];
                blue += box.bottom.rgbtBlue;
                green += box.bottom.rgbtGreen;
                red += box.bottom.rgbtRed;
                boxesToAvg++;
            }

            if (!edgeMaxX && !edgeMaxY)
            {
                box.bottomRight = image[y + 1][x + 1];
                blue += box.bottomRight.rgbtBlue;
                green += box.bottomRight.rgbtGreen;
                red += box.bottomRight.rgbtRed;
                boxesToAvg++;
            }

            blurredImg[y][x].rgbtBlue = blueAvg;
            blurredImg[y][x].rgbtGreen = greenAvg;
            blurredImg[y][x].rgbtRed = redAvg;
        }
    }

    //change the point for image to point to blurred instead.
    for (int y = 0; y < height; y++)
    {
        for (int x = 0; x < width; x++)
        {
            image[y][x].rgbtBlue = blurredImg[y][x].rgbtBlue;
            image[y][x].rgbtGreen = blurredImg[y][x].rgbtGreen;
            image[y][x].rgbtRed = blurredImg[y][x].rgbtRed;
        }
    }

    return;
}


/7-24
// Blur image
void blur(int height, int width, RGBTRIPLE image[height][width])
{
    RGBTRIPLE blurredImg[height][width];

    for (int y = 0; y < height; y++)
    {
        for (int x = 0; x < width; x++)
        {
            BLURBOX box;

            bool edgeX = false;
            bool edgeY = false;
            bool edgeMaxX = false;
            bool edgeMaxY = false;

            int boxesToAvg = 1;
            long blue = 0;
            long red = 0;
            long green = 0;

            float blueAvg = 0;
            float redAvg = 0;
            float greenAvg = 0;

            //if on the edges, skip
            if (y == 0)
            {
                edgeY = true;
            }

            if (x == 0)
            {
                edgeX = true;
            }

            if (height == y)
            {
                edgeMaxY = true;
            }

            if (width == x)
            {
                edgeMaxX = true;
            }

            // populate if not edged
            if (!edgeX && !edgeY)
            {
                box.topLeft = image[y - 1][x - 1];
                blue += box.topLeft.rgbtBlue;
                green += box.topLeft.rgbtGreen;
                red += box.topLeft.rgbtRed;
                boxesToAvg++;
            }

            if (!edgeY)
            {
                box.top = image[y - 1][x];
                blue += box.top.rgbtBlue;
                green += box.top.rgbtGreen;
                red += box.top.rgbtRed;
                boxesToAvg++;
            }

            if (!edgeY && !edgeMaxX)
            {
                box.topRight = image[y + 1][x + 1];
                blue += box.topRight.rgbtBlue;
                green += box.topRight.rgbtGreen;
                red += box.topRight.rgbtRed;
                boxesToAvg++;
            }

            if (!edgeX)
            {
                box.left = image[y][x - 1];
                blue += box.left.rgbtBlue;
                green += box.left.rgbtGreen;
                red += box.left.rgbtRed;
                boxesToAvg++;
            }

            box.self = image[y][x];
            blue += box.self.rgbtBlue;
            green += box.self.rgbtGreen;
            red += box.self.rgbtRed;

            if (!edgeMaxX)
            {
                box.right = image[y][x + 1];
                blue += box.right.rgbtBlue;
                green += box.right.rgbtGreen;
                red += box.right.rgbtRed;
                boxesToAvg++;
            }

            if (!edgeX && !edgeMaxY)
            {
                box.bottomLeft = image[y + 1][x - 1];
                blue += box.bottomLeft.rgbtBlue;
                green += box.bottomLeft.rgbtGreen;
                red += box.bottomLeft.rgbtRed;
                boxesToAvg++;
            }

            if (!edgeMaxY)
            {
                box.bottom = image[y + 1][x];
                blue += box.bottom.rgbtBlue;
                green += box.bottom.rgbtGreen;
                red += box.bottom.rgbtRed;
                boxesToAvg++;
            }

            if (!edgeMaxX && !edgeMaxY)
            {
                box.bottomRight = image[y + 1][x + 1];
                blue += box.bottomRight.rgbtBlue;
                green += box.bottomRight.rgbtGreen;
                red += box.bottomRight.rgbtRed;
                boxesToAvg++;
            }

            blurredImg[y][x].rgbtBlue = blueAvg;
            blurredImg[y][x].rgbtGreen = greenAvg;
            blurredImg[y][x].rgbtRed = redAvg;
        }
    }

    //change the point for image to point to blurred instead.
    for (int y = 0; y < height; y++)
    {
        for (int x = 0; x < width; x++)
        {
            image[y][x].rgbtBlue = blurredImg[y][x].rgbtBlue;
            image[y][x].rgbtGreen = blurredImg[y][x].rgbtGreen;
            image[y][x].rgbtRed = blurredImg[y][x].rgbtRed;
        }
    }

    return;
}


// tmpBlue = pow(kernels[i].Gy * tmpBlue, 2) + pow(kernels[i].Gx * tmpBlue, 2);
            // tmpGreen = pow(kernels[i].Gy * tmpGreen, 2) + pow(kernels[i].Gx * tmpGreen, 2);
            // tmpRed = pow(kernels[i].Gy * tmpRed, 2) + pow(kernels[i].Gx * tmpRed, 2);



            //iterate over the offsets in the 'box'
            for (int i = 0; i < offsets; i++)
            {
                coordsY = boxOffsets[i].offsetY + y;
                coordsX = boxOffsets[i].offsetX + x;

                //There are many ways to handle pixels at the edge, but for the purposes of this problem,
                //  we’ll ask you to treat the image as if there was a 1 pixel solid black border around the edge of the image:
                //  therefore, trying to access a pixel past the edge of the image should be treated as
                //  a solid black pixel (values of 0 for each of red, green, and blue)
                if (isWithinFrame(coordsY, coordsX, height, width))
                {
                    tmpBlue = image[coordsY][coordsX].rgbtBlue;
                    tmpGreen = image[coordsY][coordsX].rgbtGreen;
                    tmpRed = image[coordsY][coordsX].rgbtRed;
                }
                else
                {
                    tmpBlue = 0;
                    tmpGreen = 0;
                    tmpRed = 0;
                }

                // take the original red values for the nine pixels that form a 3x3 box around the pixel,
                //  multiply them each by the corresponding value in the Gx kernel, and take the sum of the resulting values
                blueX += kernels[i].Gx * tmpBlue;
                greenX += kernels[i].Gx * tmpGreen;
                redX += kernels[i].Gx * tmpRed;

                blueY += kernels[i].Gy * tmpBlue;
                greenY += kernels[i].Gy * tmpGreen;
                redY += kernels[i].Gy * tmpRed;
            }

            //Gx^2 + Gy^2
            blue = pow(blueX, 2) + pow(blueY, 2);
            green = pow(greenX, 2) + pow(greenY, 2);
            red = pow(redX, 2) + pow(redY, 2);

            blue = round(blue);
            green = round(green);
            red = round(red);



                        printf("DEBUG BLUE x = %li, BLUE y = %li resulting in %fi\n", blueX, blueY, blue);
            printf("DEBUG GREEN x = %li, GREEN y = %li resulting in %fi\n", greenX, greenY, green);
            printf("DEBUG RED x = %li, RED y = %li resulting in %fi\n", redX, redY, red);
            return;


                                printf("DEBUG BLUE x = %li\n", blue);
                    printf("DEBUG GREEN x = %li\n", green);
                    printf("DEBUG RED x = %li\n", red);

                    printf("DEBUG number to average = %i\n", boxesToAvg);
            printf("DEBUG BLUE x = %li, resulting in %fi\n", blue, blueAvg);
            printf("DEBUG GREEN x = %li, resulting in %fi\n", green, greenAvg);
            printf("DEBUG RED x = %li, resulting in %fi\n", red, redAvg);
            return;